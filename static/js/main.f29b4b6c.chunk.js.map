{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","syncUpdates","data","objectSpread","state","axios","post","catch","console","error","runCode","_this$state","html","css","js","document","refs","iframe","contentDocument","documentContents","concat","open","write","close","id","pusher","Pusher","cluster","forceTLS","channel","subscribe","_this2","setState","pushid","bind","dat","log","classString","getElementsByClassName","style","height","element","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","_this3","_this$state2","codeMirrorOptions","theme","lineNumbers","scrollbarStyle","lineWrapping","react_default","a","className","onClick","loadEditor","value","downloadCode","react_codemirror2","options","mode","onBeforeChange","editor","title","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f29b4b6c.chunk.js","sourcesContent":["//importing requirements\nimport React, { Component } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport Pusher from \"pusher-js\";\nimport pushid from \"pushid\";\nimport axios from \"axios\";\n\n//used codemirror library\nimport \"./App.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/htmlmixed/htmlmixed\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/javascript/javascript\";\n\n\n//all the application logic and views in this App Component\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: \"\",\n      html: \"\",\n      css: \"\",\n      js: \"\",\n\n    };\n\n    //creating a pusher instance to allow collaboration, multiple instances can be opened and they can edit and add together\n    this.pusher = new Pusher(\"d90d11b1a8b505ec91f5\", {\n      cluster: \"ap2\",\n      forceTLS: true\n    });\n\n    this.channel = this.pusher.subscribe(\"editor\");\n  }\n\n\n  //listen for any update, when updated run and render the code on live view\n  componentDidUpdate() {\n    this.runCode();\n  }\n\n  //after mounting component initialise id of the component with a unique id generated by pushid for each user.\n  //if id of the data in use by all users is equal to the source then dont update, else update the states with data.\n  componentDidMount() {\n    this.setState({\n      id: pushid()\n    });\n    this.channel.bind(\"text-update\", data => {\n      const { id } = this.state;\n      if (data.id === id) return;\n\n      this.setState({\n        html: data.html,\n        css: data.css,\n        js: data.js\n      });\n    });\n  }\n\n  //keep posting the data on the server and sync it, used axios call to post data, all users are sync with the servers data\n  syncUpdates = () => {\n    const data = { ...this.state };\n\n    axios\n      .post(\"https://dyte-backend.herokuapp.com/update-editor\", data)\n      .catch(console.error);\n  };\n\n  //for rendering code, storing html, css,js from the state, and embedding into a parent html code to render onlive view\n  runCode = () => {\n    const { html, css, js } = this.state;\n\n    const iframe = this.refs.iframe;\n    const document = iframe.contentDocument;\n    const documentContents = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>Document</title>\n        <style>\n          ${css}\n        </style>\n      </head>\n      <body>\n        ${html}\n\n        <script type=\"text/javascript\">\n          ${js}\n        </script>\n      </body>\n      </html>\n    `;\n\n\n    document.open();\n    document.write(documentContents);\n    document.close();\n  };\n\n\n  //function used to toggle and maximize the html,css or js according to click, from file explorer\n  loadEditor(dat) {\n    console.log(dat);\n    var classString = `${dat}` + \"-\" + \"code\";\n\n    if (classString === \"html-code\") {\n      document.getElementsByClassName(\"html-code\")[0].style.height = \"94.8vh\";\n      document.getElementsByClassName(\"css-code\")[0].style.height = \"0vh\";\n      document.getElementsByClassName(\"js-code\")[0].style.height = \"0vh\";\n\n    }\n\n    if (classString === \"css-code\") {\n      document.getElementsByClassName(\"html-code\")[0].style.height = \"0vh\";\n      document.getElementsByClassName(\"css-code\")[0].style.height = \"94.8vh\";\n      document.getElementsByClassName(\"js-code\")[0].style.height = \"0vh\";\n    }\n\n    if (classString === \"js-code\") {\n      document.getElementsByClassName(\"html-code\")[0].style.height = \"0vh\";\n      document.getElementsByClassName(\"css-code\")[0].style.height = \"0vh\";\n      document.getElementsByClassName(\"js-code\")[0].style.height = \"94.8vh\";\n\n    }\n  }\n\n\n  //function downloads the actual parent code as a file locally\n  downloadCode() {\n\n    const documentContents = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>Document</title>\n        <style>\n          ${this.state.css}\n        </style>\n      </head>\n      <body>\n        ${this.state.html}\n        <script type=\"text/javascript\">\n          ${this.state.js}\n        </script>\n      </body>\n      </html>\n    `;\n\n    var element = document.createElement('a');\n    element.setAttribute('href', \"data:text/plain;charset=UTF-8,\" + encodeURIComponent(documentContents));\n    element.setAttribute('download', \"codeSoumyadeeptaDas.txt\");\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click(); // simulate click\n    document.body.removeChild(element);\n\n  }\n\n  //render\n  render() {\n    const { html, js, css } = this.state;\n    const codeMirrorOptions = {\n      theme: \"material\",\n      lineNumbers: true,\n      scrollbarStyle: null,\n      lineWrapping: true\n    };\n\n    return (\n      \n      <div className=\"App\">\n\n        <div>\n          <section className=\"headersection\">\n            <div><h2>Live Code Editor with collaboration features</h2>\n              <h4>by: Soumyadeepta Das (18BCE1350)</h4>\n            </div>\n          </section>\n        </div>\n\n\n        <div>\n          <section className=\"fileexplorersection\">\n            <div className=\"section-heading\">File Explorer</div>\n            <div className=\"file-explorer\">\n              <br></br>\n              <p>Click on a file to maximize on code editor</p>\n              <ul className=\"filelist\">\n                <li onClick={() => this.loadEditor(\"html\")} id=\"html\" value=\"html\">index.html</li>\n                <li onClick={() => this.loadEditor(\"css\")} id=\"css\" value=\"css\">index.css</li>\n                <li onClick={() => this.loadEditor(\"js\")} id=\"js\" value=\"js\">index.js</li>\n              </ul>\n\n              <button id=\"downloadButton\" onClick={() => this.downloadCode()}>Download Code</button>\n            </div>\n          </section>\n\n\n          <section className=\"codeeditorsection\">\n            <div className=\"section-heading\">Code Editor</div>\n\n            <div className=\"code-editor html-code\">\n              <div className=\"editor-header\">HTML (index.html)</div>\n              <CodeMirror\n                value={html}\n                options={{\n                  mode: \"htmlmixed\",\n                  ...codeMirrorOptions\n                }}\n                onBeforeChange={(editor, data, html) => {\n                  this.setState({ html }, () => this.syncUpdates());\n                }}\n              />\n            </div>\n\n            <div className=\"code-editor css-code\">\n              <div className=\"editor-header\">CSS (index.css)</div>\n              <CodeMirror\n                value={css}\n                options={{\n                  mode: \"css\",\n                  ...codeMirrorOptions\n                }}\n                onBeforeChange={(editor, data, css) => {\n                  this.setState({ css }, () => this.syncUpdates());\n                }}\n              />\n            </div>\n\n            <div className=\"code-editor js-code\">\n              <div className=\"editor-header\">JavaScript (index.js)</div>\n              <CodeMirror\n                value={js}\n                options={{\n                  mode: \"javascript\",\n                  ...codeMirrorOptions\n                }}\n                onBeforeChange={(editor, data, js) => {\n                  this.setState({ js }, () => this.syncUpdates());\n                }}\n              />\n            </div>\n\n          </section>\n\n\n          <section className=\"liveviewsection\">\n            <div className=\"section-heading\">Live View (Rendered view)</div>\n            <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n          </section>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n     \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl, config);\n\n       \n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n      \n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n             \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n             \n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  \n  fetch(swUrl)\n    .then(response => {\n     \n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// to work offline and load faster, change\n// unregister() to register() below. \nserviceWorker.unregister();\n"],"sourceRoot":""}